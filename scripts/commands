#!/bin/bash -e

# Configures various commands

THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
source "${THIS_SCRIPT_DIR}/common"

configureGit() {
    if command -v git >/dev/null; then
        git config --global alias.confg 'config --global'

        if command -v nano >/dev/null; then
            git confg core.editor nano
        fi

        if command -v less >/dev/null; then
            # Tabs stops are set one column from the left of the console,
            # then every 4 columns. Good for 'git diff', where the first
            # character is only to tell whether the line was deleted added,
            # or unchanged.
            #
            # '-+F' makes sure to always page, even if there is one screen
            # (I have a tendency to hit 'q' immediately after running
            # 'git log', which types a literal 'q' on the command-line when
            # 'git log' shows less than one page.)
            git confg core.pager 'less -x1,5 -+F' || return
        fi

        local EXCLUDES_FILE="$HOME/.gitexcludes"
        touch "${EXCLUDES_FILE}" || return
        echo >> "${EXCLUDES_FILE}" || return
        echo '###########################################' >> "${EXCLUDES_FILE}" || return
        echo '# Written by Anthonyzation script' >> "${EXCLUDES_FILE}" || return
        echo '# https://github.com/anthonyd973/anthonyize' >> "${EXCLUDES_FILE}" || return
        echo '# VSCode config dir. Often useful on Git, but often not.' >> "${EXCLUDES_FILE}" || return
        echo '.vscode/' >> "${EXCLUDES_FILE}" || return
        echo '# Nano backup files' >> "${EXCLUDES_FILE}" || return
        echo '*.bak' >> "${EXCLUDES_FILE}" || return
        echo '# Emacs temporary files' >> "${EXCLUDES_FILE}" || return
        echo '*~' >> "${EXCLUDES_FILE}" || return
        echo '.#*' >> "${EXCLUDES_FILE}" || return
        echo '\#*#' >> "${EXCLUDES_FILE}" || return
        echo '# CMake Presets for user --not meant to be in repos:' >> "${EXCLUDES_FILE}" || return
        echo '# https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html#introduction' >> "${EXCLUDES_FILE}" || return
        echo 'CMakeUserPresets.json' >> "${EXCLUDES_FILE}" || return
        echo '###########################################' >> "${EXCLUDES_FILE}" || return
        git confg core.excludesfile "${EXCLUDES_FILE}"

        # Regularly performs Git cleanup stuff using e.g. a systemd unit:
        # https://blog.gitbutler.com/git-tips-2-new-stuff-in-git/#git-maintenance
        # This requires Git 2.29, so ignore it if it fails.
        git maintenance start || true

        git confg branch.sort -committerdate
        git confg color.ui auto
        git confg column.ui auto
        git confg push.default simple
        # Makes 'fetch' write a commit graph so that 'git log --graph' is much
        # faster on big repos
        git confg fetch.writeCommitGraph true

        # Aliases
        git confg alias.a 'add -A'
        git confg alias.ap 'add -Ap'
        git confg alias.b branch
        git confg alias.bis bisect
        git confg alias.bl blame
        git confg alias.c commit
        git confg alias.cam 'commit --amend'
        git confg alias.ch checkout
        git confg alias.cl clone
        git confg alias.conf config
        git confg alias.cp cherry-pick
        git confg alias.cpc 'cherry-pick --continue'
        git confg alias.cpa 'cherry-pick --abort'
        git confg alias.cps 'cherry-pick --skip'
        git confg alias.d diff
        git confg alias.f fetch
        git confg alias.fap 'fetch --all --prune'
        git confg alias.fp format-patch
        git confg alias.h 'log --graph --decorate'
        git confg alias.m merge
        git confg alias.ma 'merge --abort'
        git confg alias.mb 'merge-base'
        git confg alias.p pull
        git confg alias.r reset
        git confg alias.reb rebase
        git confg alias.rebc 'rebase --continue'
        git confg alias.reba 'rebase --abort'
        git confg alias.rebs 'rebase --skip'
        git confg alias.rest 'restore'
        git confg alias.rev revert
        git confg alias.rp rev-parse
        git confg alias.s status
        git confg alias.st stash
        git confg alias.sta 'stash --all'
        git confg alias.subm submodule
        git confg alias.submu 'submodule update'
        git confg alias.submuir 'submodule update --init --recursive'
        git confg alias.sw 'switch'
        git confg alias.t tag
        # git whatchanged is deprecated, so use git log instead for wc
        # https://stackoverflow.com/a/18585297/2252948
        git confg alias.wc 'log --raw --no-merges --graph --decorate'
    else
        messageStatus '"git" command not found in PATH. Not configuring Git.'
    fi
}

# Adds the fingerprint in first arg if it doesn't exist in SSH's known_hosts
# file already.
add_ssh_fingerprint() {
    local fingerprint="${1}"
    local known_hosts_path="$HOME/.ssh/known_hosts"
    local domain="$(echo "${fingerprint}" | awk '{print $1}')"
    local algo="$(echo "${fingerprint}" | awk '{print $2}')"
    if [ ! -f "$known_hosts_path" ]; then
        touch "$known_hosts_path"
    fi
    if ! grep -qF "${fingerprint}" "${known_hosts_path}"; then
        echo "Adding ${domain} fingerprint (algo ${algo}) to ${known_hosts_path}"
        echo "${fingerprint}" >> "${known_hosts_path}"
    fi
}

configureSsh() {
    # Check if open-ssh seems to be installed, otherwise skip installation
    if ! command -v add_ssh_fingerprint >/dev/null; then
        messageStatus 'Not configuring OpenSSH: doesn'"'"'t seem to be installed.'
        true
        return
    fi

    mkdir -p "$HOME/.ssh"
    # Add SSH fingerprints to ~/.ssh/known_hosts

    # GitHub
    # See: https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/githubs-ssh-key-fingerprints
    add_ssh_fingerprint 'github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl'
    add_ssh_fingerprint 'github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg='
    add_ssh_fingerprint 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk='
    # gitlab.com
    # See: https://docs.gitlab.com/ee/user/gitlab_com/#ssh-known_hosts-entries
    add_ssh_fingerprint 'gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf'
    add_ssh_fingerprint 'gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9'
    add_ssh_fingerprint 'gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY='
}

configureCommands() {
    configureGit || return
    configureSsh || return
}
